version: '3.8'

services:
  # Nginx Reverse Proxy & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: linkbay_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - landing
      - agency
      - customer
      - websites
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Database PostgreSQL (Internal only)
  postgres:
    image: postgres:15-alpine
    container_name: linkbay_postgres_prod
    environment:
      POSTGRES_DB: linkbaycms
      POSTGRES_USER: root
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    # NO external ports in production
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d linkbaycms"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Redis Cache (Internal only)
  redis:
    image: redis:7-alpine
    container_name: linkbay_redis_prod
    # NO external ports in production
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Backend Node.js Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: linkbay_backend_prod
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://root:${DB_PASSWORD}@postgres:5432/linkbaycms
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
    expose:
      - "3000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Frontend Landing Page (Build statico con Nginx)
  landing:
    build:
      context: ./landing
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=https://linkbay-cms.com/api
    container_name: linkbay_landing_prod
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Frontend Agency (Build statico con Nginx)
  agency:
    build:
      context: ./agency
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=https://app.linkbay-cms.com/api
    container_name: linkbay_agency_prod
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Frontend Customer (Build statico con Nginx)
  customer:
    build:
      context: ./customer
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=https://manage.linkbay-cms.com/api
    container_name: linkbay_customer_prod
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Frontend Websites (Build statico con Nginx)
  websites:
    build:
      context: ./websites
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=https://sites.linkbay-cms.com/api
    container_name: linkbay_websites_prod
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - linkbay_network_prod

  # Watchtower per auto-updates (Opzionale)
  watchtower:
    image: containrrr/watchtower
    container_name: linkbay_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  linkbay_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16