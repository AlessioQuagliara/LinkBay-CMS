// Prisma schema per LinkBay CMS
// Multi-tenant CMS con supporto per agenzie, siti web e clienti

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modello User - Utente principale del sistema (agenzia)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(AGENCY)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  agencies  Agency[]
  tokens    RefreshToken[]

  @@map("users")
}

enum UserRole {
  AGENCY
  ADMIN
}

// Modello Agency - Agenzia che gestisce pi√π siti
model Agency {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  websites Website[]
  customers Customer[]

  @@map("agencies")
}

// Modello Website - Sito web gestito
model Website {
  id          String        @id @default(uuid())
  name        String
  domain      String        @unique
  description String?
  logo        String?
  status      WebsiteStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relazioni
  agencyId   String
  agency     Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  customerId String?
  customer   Customer?  @relation(fields: [customerId], references: [id])

  @@map("websites")
}

enum WebsiteStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

// Modello Customer - Cliente finale
model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  company   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  agencyId String
  agency   Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  websites Website[]

  @@unique([email, agencyId])
  @@map("customers")
}

// Modello RefreshToken - Token JWT per refresh
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relazioni
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
