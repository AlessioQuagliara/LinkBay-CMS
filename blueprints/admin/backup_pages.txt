# Funzione per salvare il contenuto della pagina con gestione delle immagini ---------------------------------
@page_bp.route('/admin/cms/function/save', methods=['POST'])
def save_page():
    try:
        data = request.get_json()
        page_id = data.get('id')
        content = data.get('content')
        language = data.get('language')  # Aggiungiamo il parametro lingua
        shop_subdomain = request.host.split('.')[0]

        logging.info(f"Salvataggio pagina con ID: {page_id}, lingua: {language} per il negozio: {shop_subdomain}")
        
        db_conn = db_helper.get_db_connection()  
        page_model = Page(db_conn)  
        
        # Cerca immagini base64 nel contenuto
        img_tags = re.findall(r'<img.*?src=["\'](data:image/[^"\']+)["\']', content)
        for base64_img in img_tags:
            # Salva l'immagine base64
            image_url = save_image(base64_img, page_id, shop_subdomain)
            if image_url:
                # Sostituisci l'immagine base64 con l'URL dell'immagine salvata
                content = content.replace(base64_img, image_url)
        
        # Aggiorna il contenuto della pagina nel database con la lingua specifica
        success = page_model.update_or_create_page_content(page_id, content, language, shop_subdomain)
        return jsonify({'success': success})
    
    except Exception as e:
        logging.info(f"Errore durante il salvataggio della pagina: {str(e)}")
        return jsonify({'success': False, 'error': str(e)})



# Endpoint Flask per gestire l'upload delle immagini generiche -------------------------------------------------------
@page_bp.route('/upload-image', methods=['POST'])
def upload_image():
    data = request.get_json()
    base64_image = data.get('image')

    if not base64_image:
        return jsonify({'error': 'No image provided'}), 400

    upload_folder = "static/uploads"
    image_url = save_base64_image(base64_image, upload_folder)
    
    if image_url:
        return jsonify({'url': image_url}), 200
    else:
        return jsonify({'error': 'Failed to upload image'}), 500
    
# Upload SEO -------------------------------------------------------

# Funzione per salvare i dati SEO della pagina
@page_bp.route('/admin/cms/function/save-seo', methods=['POST'])
def save_seo_page():
    data = request.get_json()
    page_id = data.get('id')
    title = data.get('title')
    description = data.get('description')
    keywords = data.get('keywords')
    slug = data.get('slug')

    shop_subdomain = request.host.split('.')[0]  

    db_conn = db_helper.get_db_connection()  
    page_model = Page(db_conn)  

    success = page_model.update_page_seo(page_id, title, description, keywords, slug, shop_name=shop_subdomain)

    return jsonify({'success': success})


# Funzione per creare una nuova pagina per un negozio specifico
@page_bp.route('/admin/cms/function/create', methods=['POST'])
def create_page():
    if 'user_id' not in session:
        return jsonify({'success': False, 'message': 'You need to log in first.'})

    if request.method == 'POST':
        data = request.get_json()
        title = data.get('title')
        description = data.get('description')
        keywords = data.get('keywords')
        slug = data.get('slug')
        content = data.get('content')
        theme_name = data.get('theme_name')
        paid = data.get('paid')
        language = data.get('language')
        published = data.get('published')

        shop_subdomain = request.host.split('.')[0]  

        db_conn = db_helper.get_db_connection()
        page_model = Page(db_conn)  

        success = page_model.create_page(title, description, keywords, slug, content, theme_name, paid, language, published, shop_name=shop_subdomain)

        return jsonify({'success': success})
    

# Funzione per eliminare una pagina di un negozio specifico
@page_bp.route('/admin/cms/function/delete', methods=['POST'])
def delete_page():
    data = request.get_json()
    page_id = data.get('id')  

    if not page_id:
        return jsonify({'success': False, 'message': 'ID pagina mancante.'})
    shop_subdomain = request.host.split('.')[0]  

    page_model = Page(db_helper.get_db_connection())  
    try:
        page_model.delete_page(page_id, shop_name=shop_subdomain)  
        return jsonify({'success': True, 'message': 'Pagina cancellata con successo.'})
    except Exception as e:
        return jsonify({'success': False, 'message': f"Errore durante la cancellazione: {str(e)}"})


# ----------------------------------------------
# ðŸ“Œ ROUTE: NAVBAR SETTINGS (Visualizza Impostazioni NavbarLink)
# ----------------------------------------------

@page_bp.route('/admin/cms/function/navbar-settings')
def navbar_settings():
    shop_name = request.host.split('.')[0]
    with db_helper.get_db_connection() as db_conn:
        navbar_model = NavbarLink(db_conn)
        pages_model = Page(db_conn)
        navbar_links = navbar_model.get_navbar_links(shop_name)
        pages = pages_model.get_published_pages(shop_name)
    return render_template(
        'admin/cms/function/navigation.html',
        title="Navbar Settings",
        navbar_links=navbar_links,
        pages=pages
    )

@page_bp.route('/api/get-navbar-links', methods=['GET'])
def get_navbar_links():
    shop_name = request.host.split('.')[0]
    with db_helper.get_db_connection() as db_conn:
        navbar_model = NavbarLink(db_conn)
        navbar_links = navbar_model.get_navbar_links(shop_name)
    return jsonify({'success': True, 'navbar_links': navbar_links})

@page_bp.route('/api/add-navbar-link', methods=['POST'])
def add_navbar_link():
    try:
        data = request.get_json()
        shop_name = request.host.split('.')[0]

        new_link = {
            'link_text': data.get('link_text', 'New Link'),
            'link_url': data.get('link_url', '/link'),
            'link_type': data.get('link_type', 'standard'),
            'parent_id': data.get('parent_id', None),
            'position': data.get('position', 1)
        }

        with db_helper.get_db_connection() as db_conn:
            navbar_model = NavbarLink(db_conn)
            navbar_model.create_navbar_link(shop_name, **new_link)

        return jsonify({'success': True, 'message': 'Link aggiunto con successo'})

    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@page_bp.route('/api/delete-navbar-links', methods=['POST'])
def delete_navbar_links():
    data = request.get_json()
    shop_name = request.host.split('.')[0]
    link_ids = data.get('ids', [])
    with db_helper.get_db_connection() as db_conn:
        navbar_model = NavbarLink(db_conn)
        for link_id in link_ids:
            navbar_model.delete_navbar_link(link_id, shop_name)
    return jsonify({'success': True, 'message': 'Link eliminati con successo'})

@page_bp.route('/api/save-navbar', methods=['POST'])
def save_navbar():
    try:
        data = request.get_json()
        navbar_links = data.get("navbar_links", [])
        shop_name = request.host.split('.')[0]

        if not navbar_links:
            return jsonify({'success': False, 'error': 'Nessun link ricevuto'}), 400

        with db_helper.get_db_connection() as db_conn:
            navbar_model = NavbarLink(db_conn)
            navbar_model.delete_all_navbar_links(shop_name)  # Cancella i link esistenti
            
            # Salva i nuovi link
            for link in navbar_links:
                navbar_model.create_navbar_link(
                    shop_name=shop_name,
                    link_text=link.get("link_text"),
                    link_url=link.get("link_url"),
                    link_type=link.get("link_type"),
                    parent_id=link.get("parent_id"),
                    position=link.get("position")
                )

        return jsonify({'success': True, 'message': 'NavbarLink salvata con successo!'})

    except Exception as e:
        logging.error(f"Errore nel salvataggio della navbar: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@page_bp.route('/api/get-pages', methods=['GET'])
def get_pages():
    """ Recupera le pagine pubblicate per il negozio corrente """
    try:
        shop_name = request.host.split('.')[0]
        with db_helper.get_db_connection() as db_conn:
            pages_model = Page(db_conn)
            pages = pages_model.get_published_pages(shop_name)

        if pages:
            return jsonify({'success': True, 'pages': pages})
        else:
            return jsonify({'success': False, 'message': 'Nessuna pagina pubblicata trovata'}), 404

    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@page_bp.route('/api/get-site-visits', methods=['GET'])
def get_site_visits():
    """
    API per recuperare le visite del negozio corrente.
    """
    try:
        shop_name = request.host.split('.')[0] if request.host else None

        if not shop_name:
            return jsonify({'success': False, 'error': 'Invalid shop name'}), 400

        # Connessione al database
        with db_helper.get_db_connection() as conn:
            site_visits = SiteVisit(conn)
            visits = site_visits.get_recent_visits(shop_name, limit=100)

        return jsonify({'success': True, 'visits': visits})

    except Exception as e:
        logging.error(f"Errore in get_site_visits: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500