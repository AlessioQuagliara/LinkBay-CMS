name: CI / CD

on:
  pull_request:
    branches: [ '**' ]
  push:
    branches: [ main ]

jobs:
  ci:
    name: Continuous Integration (PR)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: |
          npm test

      - name: Run test migrations
        if: success()
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: |
          npx knex migrate:latest --knexfile ./knexfile.ts

  build_and_deploy:
    name: Build and Deploy to Staging
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Archive build
        run: tar -czf build.tar.gz dist package.json package-lock.json knexfile.ts migrations seeds

      - name: Deploy to staging (rsync over SSH)
        if: ${{ secrets.STAGING_HOST && secrets.STAGING_USER && secrets.STAGING_SSH_KEY }}
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT || '22' }}
          source: "build.tar.gz"
          target: ${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}

      - name: Remote deploy commands (extract & restart)
        if: ${{ secrets.STAGING_HOST && secrets.STAGING_USER && secrets.STAGING_SSH_KEY }}
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT || '22' }}
          script: |
            set -e
            mkdir -p "${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}.tmp"
            tar -xzf ${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}/build.tar.gz -C "${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}.tmp" || true
            mv "${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}.tmp/dist" "${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}/dist"
            mv "${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}.tmp/package.json" "${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}/package.json" || true
            # Install production deps and restart service (assumes systemd service linkbay_cms)
            cd ${{ secrets.STAGING_TARGET_PATH || '/var/www/linkbay_cms' }}
            npm ci --omit=dev
            if systemctl --version >/dev/null 2>&1; then
              sudo systemctl restart linkbay_cms || true
            fi

  prod_migrations:
    name: Production Migrations (manual)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_deploy
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run production migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx knex migrate:latest --knexfile ./knexfile.ts
    permissions:
      contents: read
    # Require manual approval from environment protection rules or workflow_dispatch
