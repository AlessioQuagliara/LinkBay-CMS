<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Editor - <%= pageId %></title>
    <link href="https://unpkg.com/grapesjs/dist/css/grapes.min.css" rel="stylesheet" />
    <style>
      body, html { height: 100%; margin:0; }
      #gjs { height: calc(100vh - 50px); }
      .editor-top { height:50px; padding:8px; background:#f5f5f5; display:flex; align-items:center; gap:8px; }
    </style>
  </head>
  <body>
    <div class="editor-top">
      <select id="langSelect">
        <option value="en">English</option>
        <option value="it">Italiano</option>
        <option value="es">Espa√±ol</option>
      </select>
      <button id="saveBtn"><%= t('editor.save') %></button>
      <button id="previewBtn"><%= t('editor.preview') %></button>
      <span id="status"></span>
    </div>
    <div id="gjs"></div>
    <div id="blocksPanel" style="position:fixed; right:8px; top:70px; width:260px; max-height:70vh; overflow:auto; background:#fff; border:1px solid #ddd; padding:8px; box-shadow:0 6px 18px rgba(0,0,0,0.08); z-index:2000;">
      <h4 style="margin:0 0 8px 0; font-size:14px;"><%= t('editor.blocks') %></h4>
      <div id="blocksList"><%= t('editor.loading_blocks') %></div>
    </div>

    <script src="https://unpkg.com/grapesjs"></script>
    <script src="https://unpkg.com/grapesjs-plugin-code/dist/grapesjs-plugin-code.min.js"></script>
    <script>
      const PAGE_ID = '<%= pageId %>';
      async function loadData(){
        try{
          const res = await fetch('/api/pages/' + PAGE_ID);
          if(!res.ok) return {};
          return await res.json();
        }catch(e){ return {}; }
      }

      (async ()=>{
        const data = await loadData();
        const editor = grapesjs.init({
          container: '#gjs',
          fromElement: false,
          height: '100%',
          storageManager: { autoload: false },
          plugins: [ 'gjs-plugin-code' ],
          pluginsOpts: { 'gjs-plugin-code': {} },
        });

        // Add a simple Bootstrap-compatible block
        editor.BlockManager.add('bootstrap-row', {
          label: 'Bootstrap Row',
          content: '<div class="container"><div class="row"><div class="col">Column</div><div class="col">Column</div></div></div>',
        });

        // Load block templates from static JSON and render panel
        async function loadBlocks(){
          try {
            const res = await fetch('/static/js/admin/blocks.json');
            const data = await res.json();
            const list = document.getElementById('blocksList');
            list.innerHTML = '';
            Object.keys(data).forEach(key => {
              const b = data[key];
              const el = document.createElement('div');
              el.style.borderBottom = '1px solid #eee';
              el.style.padding = '6px 0';
              el.innerHTML = `<div style="display:flex;gap:8px;align-items:center"><img src="${b.image}" style="width:64px;height:48px;object-fit:cover;border-radius:4px;border:1px solid #ddd"><div style="flex:1"><strong style="font-size:13px">${b.label}</strong><div style="font-size:12px;color:#666">${b.category||''}</div></div><button data-key="${key}" style="margin-left:8px">Import</button></div>`;
              list.appendChild(el);
              el.querySelector('button').addEventListener('click', ()=>{
                // merge block content into editor: append HTML and merge CSS
                const blockHtml = b.content || '';
                editor.DomComponents.getWrapper().append({ type: 'default', content: blockHtml });
                // simple merge: append styles to existing style
                const existingCss = editor.getCss();
                editor.setStyle(existingCss + '\n/* block styles */\n');
                // also register as block in BlockManager for reusability
                editor.BlockManager.add('block-' + key, { label: b.label, content: blockHtml });
              });
            });
          } catch (e) {
            document.getElementById('blocksList').textContent = 'Error loading blocks';
          }
        }
        loadBlocks();

        // Load existing content
        if (data && data.content) {
          try {
            const parsed = JSON.parse(data.content);
            if(parsed.html) editor.setComponents(parsed.html);
            if(parsed.css) editor.setStyle(parsed.css);
          } catch(e){ /* ignore */ }
        }

          // set default language selector if server passed it
          const serverLang = '<%= typeof lang !== "undefined" ? lang : "en" %>';
          document.getElementById('langSelect').value = serverLang || 'en';

        document.getElementById('saveBtn').addEventListener('click', async ()=>{
          const html = editor.getHtml();
          const css = editor.getCss();
          const comps = editor.getComponents();
          const payload = { html, css, components: comps, language: document.getElementById('langSelect').value };
          document.getElementById('status').textContent = 'Saving...';
          const r = await fetch('/api/pages/' + PAGE_ID, { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify(payload) });
          if(r.ok) document.getElementById('status').textContent = 'Saved';
          else document.getElementById('status').textContent = 'Error';
        });

        // Preview button: POST the current content to /api/editor/preview and open in a new window
        document.getElementById('previewBtn').addEventListener('click', async ()=>{
          const html = editor.getHtml();
          const css = editor.getCss();
          const comps = editor.getComponents();
          const payload = { html, css, components: comps, language: document.getElementById('langSelect').value };
          document.getElementById('status').textContent = 'Generating preview...';
          try {
            const res = await fetch('/api/editor/preview', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify(payload) });
            if(!res.ok) throw new Error('Preview API error');
            const previewHtml = await res.text();
            // Open a new window and write the preview HTML into it
            const w = window.open('', '_blank');
            if(!w) { alert('Please allow popups for preview to open'); return; }
            w.document.open();
            w.document.write(previewHtml);
            w.document.close();
            document.getElementById('status').textContent = 'Preview opened';
          } catch (e) {
            console.error(e);
            document.getElementById('status').textContent = 'Preview error';
          }
        });
      })();
    </script>
  </body>
</html>
