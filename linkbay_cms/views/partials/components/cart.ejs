<% /* Minimal Alpine cart component.
   Usage: include once on a page to mount the cart component.
   To add from outside: window.dispatchEvent(new CustomEvent('cart:add', { detail: productObject }))
   Product object shape: { id, title, price_cents }
*/ %>
<div x-data="cartComponent()" x-init="init()" class="fixed right-4 bottom-4 w-80 bg-white rounded-lg shadow-lg p-4">
  <h4 class="font-semibold mb-2">Carrello</h4>
  <template x-if="items.length === 0">
    <div class="text-sm text-gray-500">Il carrello è vuoto</div>
  </template>
  <template x-for="item in items" :key="item.id">
    <div class="flex items-center justify-between py-2 border-b last:border-b-0">
      <div>
        <div class="text-sm font-medium" x-text="item.title"></div>
        <div class="text-xs text-gray-500">Quantità: <span x-text="item.qty"></span></div>
      </div>
      <div class="text-sm">
        <div x-text="formatCurrency(item.price_cents * item.qty)"></div>
        <div class="mt-1 flex space-x-1">
          <button @click="decrease(item.id)" class="px-2 py-1 text-xs border rounded">-</button>
          <button @click="increase(item.id)" class="px-2 py-1 text-xs border rounded">+</button>
          <button @click="remove(item.id)" class="px-2 py-1 text-xs text-red-600">Rimuovi</button>
        </div>
      </div>
    </div>
  </template>

  <div class="mt-3 flex items-center justify-between">
    <div class="text-sm text-gray-600">Totale</div>
    <div class="font-semibold" x-text="formatCurrency(total)"></div>
  </div>
  <div class="mt-3">
    <button @click="checkout()" class="w-full px-3 py-2 rounded bg-primary text-white">Checkout</button>
  </div>

  <script>
    function cartComponent(){
      return {
        items: [],
        init(){
          // listen for global add events
          window.addEventListener('cart:add', e => { if (e.detail) this.addItem(e.detail); });
        },
        find(id){ return this.items.find(i=>i.id===id); },
        addItem(product){
          const existing = this.find(product.id);
          if (existing) { existing.qty += 1; } else { this.items.push({ id: product.id, title: product.title, price_cents: product.price_cents || 0, qty: 1 }); }
        },
        remove(id){ this.items = this.items.filter(i=>i.id!==id); },
        increase(id){ const it=this.find(id); if(it) it.qty+=1; },
        decrease(id){ const it=this.find(id); if(it){ it.qty = Math.max(1, it.qty-1); } },
        get total(){ return this.items.reduce((s,i)=>s + (i.price_cents * i.qty), 0); },
        formatCurrency(cents){ return (cents/100).toFixed(2) + ' €'; },
        checkout(){ alert('Checkout - totale: '+ this.formatCurrency(this.total)); }
      }
    }
  </script>
</div>
