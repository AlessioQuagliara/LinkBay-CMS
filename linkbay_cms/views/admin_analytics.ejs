<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Analytics Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style> .grid{display:flex;gap:1rem} .col{flex:1;padding:1rem;border:1px solid #ddd;border-radius:6px} table{width:100%;border-collapse:collapse} th,td{border:1px solid #eee;padding:6px;text-align:left}</style>
</head>
<body>
  <h1>Analytics</h1>
  <div>
    <label>Start: <input type="date" id="startDate"/></label>
    <label>End: <input type="date" id="endDate"/></label>
    <button id="load">Load</button>
  </div>
  <div class="grid" style="margin-top:12px">
    <div class="col">
      <h3>Visits & Conversion</h3>
      <canvas id="visitsChart" height="150"></canvas>
      <div id="overview"></div>
    </div>
    <div class="col">
      <h3>Sales</h3>
      <canvas id="salesChart" height="150"></canvas>
    </div>
  </div>
    <div id="tenant-health" class="card">
      <h3>Site Health</h3>
      <div id="health-indicators">
        <div class="health-row"><span>Orders (24h)</span><span id="orders-indicator">—</span></div>
        <div class="health-row"><span>Avg Page Load (7d)</span><span id="perf-indicator">—</span></div>
        <div class="health-row"><span>Subscriptions</span><span id="subs-indicator">—</span></div>
        <div class="health-row"><span>Recent Errors</span><span id="errors-indicator">—</span></div>
      </div>
      <div id="errors-list" style="margin-top:8px; max-height:220px; overflow:auto; font-size:0.9em;"></div>
    </div>
  <div style="margin-top:12px">
    <h3>Popular Pages</h3>
    <table id="pagesTable"><thead><tr><th>URL</th><th>Views</th></tr></thead><tbody></tbody></table>
  </div>

  <script>
    async function fetchTenantHealth(){
      try{
        const res = await fetch('/api/tenant/health', { credentials: 'same-origin' });
        if (!res.ok) return;
        const data = await res.json();
        // orders
        const ordersTxt = `${data.orders.pending} pending, ${data.orders.problematic} problematic`;
        const ordersEl = document.getElementById('orders-indicator');
        ordersEl.textContent = ordersTxt;
        ordersEl.style.color = data.orders.problematic > 5 ? 'red' : (data.orders.problematic > 0 ? 'orange' : 'green');

        // performance
        const perfEl = document.getElementById('perf-indicator');
        if (data.performance && data.performance.avg_load_ms !== null){
          const ms = Math.round(data.performance.avg_load_ms);
          perfEl.textContent = ms + ' ms (' + data.performance.samples + ')';
          perfEl.style.color = ms > 3000 ? 'red' : (ms > 1000 ? 'orange' : 'green');
        } else { perfEl.textContent = 'n/a'; }

        // subscriptions
        const subsEl = document.getElementById('subs-indicator');
        if (data.subscription && data.subscription.status){
          subsEl.textContent = data.subscription.status + (data.subscription.expires_at ? ' until '+new Date(data.subscription.expires_at).toLocaleString() : '');
          subsEl.style.color = data.subscription.status === 'active' ? 'green' : (data.subscription.status === 'expiring' ? 'orange' : 'red');
        }

        // errors
        const errEl = document.getElementById('errors-indicator');
        const listEl = document.getElementById('errors-list');
        if (data.recent_errors && data.recent_errors.length){
          errEl.textContent = data.recent_errors.length + ' recent';
          errEl.style.color = 'red';
          listEl.innerHTML = data.recent_errors.map(e=>`<div><strong>${e.event_type}</strong> <em>${new Date(e.timestamp).toLocaleString()}</em><pre style="white-space:pre-wrap">${JSON.stringify(e.event_data)}</pre></div>`).join('');
        } else { errEl.textContent = 'None'; errEl.style.color='green'; listEl.innerHTML=''; }
      }catch(err){ console.error('health fetch', err); }
    }
    document.addEventListener('DOMContentLoaded', fetchTenantHealth);
  </script>
  <script>
    function fmtDate(d){ return d.toISOString().slice(0,10); }
    const startInput = document.getElementById('startDate'); const endInput = document.getElementById('endDate');
    const today = new Date(); const last7 = new Date(Date.now() - 6*24*3600*1000);
    startInput.value = fmtDate(last7); endInput.value = fmtDate(today);

    let visitsChart = null; let salesChart = null;

    async function load(){
      const startDate = startInput.value; const endDate = endInput.value;
      const qs = `?startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`;
      const ov = await fetch('/api/analytics/overview'+qs).then(r=>r.json());
      document.getElementById('overview').innerHTML = `Visits: <strong>${ov.visits}</strong> · Unique: <strong>${ov.uniqueUsers}</strong> · Purchases: <strong>${ov.purchases}</strong> · Revenue: <strong>$${(ov.revenue_cents/100).toFixed(2)}</strong>`;

      const pages = await fetch('/api/analytics/popular-pages'+qs).then(r=>r.json());
      const tbody = document.querySelector('#pagesTable tbody'); tbody.innerHTML=''; pages.pages.forEach(p=>{ const tr=document.createElement('tr'); tr.innerHTML=`<td>${p.url}</td><td>${p.views}</td>`; tbody.appendChild(tr); });

      const sales = await fetch('/api/analytics/sales'+qs).then(r=>r.json());
      const labels = sales.series.map(s=> (new Date(s.day)).toISOString().slice(0,10));
      const revenue = sales.series.map(s=> s.revenue_cents/100);

      // visits chart: simple placeholder using overview visits as single point if no series
      const visitsData = { labels: labels.length?labels:[startDate], datasets: [{ label:'Revenue', data: revenue, borderColor:'blue', backgroundColor:'rgba(0,0,255,0.1)' }] };
      if(visitsChart) visitsChart.destroy(); visitsChart = new Chart(document.getElementById('visitsChart'), { type:'line', data: visitsData, options:{} });

      if(salesChart) salesChart.destroy(); salesChart = new Chart(document.getElementById('salesChart'), { type:'bar', data: { labels, datasets: [{ label:'Revenue', data: revenue, backgroundColor:'green' }] }, options:{} });
    }

    document.getElementById('load').addEventListener('click', load);
    window.addEventListener('load', load);
  </script>
</body>
</html>
